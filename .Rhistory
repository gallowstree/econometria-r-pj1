beds_per_capita<-data$total_bedrooms / data$population
rooms_per_capita<-data$total_rooms / data$population
pop_per_household<-data$population/data$households
return(data.frame(   median_income=data$median_income,
enc_ocean_proximity=data$enc_ocean_proximity,
total_rooms=data$total_rooms,
latitude=data$latitude,
longitude=data$longitude,
total_bedrooms=data$total_bedrooms,
housing_median_age=data$housing_median_age,
beds_per_rooms=beds_per_rooms,
rooms_per_capita=rooms_per_capita,
rooms_per_household=rooms_per_household,
income_per_capita=income_per_capita))
}
compare_capped_performance<-function(train_data, colName, candidates, extract=extractAndRecalculateTrainingVars) {
# implement scaling/norm/transform and add it here
# allow more than one var at the same time
for (candidate in names(candidates)) {
print(candidate)
col<-candidates[[candidate]]
train_data[[colName]]<-col
fit<-lm(median_house_value ~ ., data = extract(train_data))
print(paste(scores(fit)))
}
}
data_train<-trainMinusTopOL
library(dplyr)
library(ggplot2)
library(cleandata)
library(corrplot)
library(gridExtra)
library(Metrics)
library(caret)
library(MASS)
library(robustbase)
library(cvTools)
median_house_value_scale = 10000
initialPreprocessing<-function(df) {
df$ocean_proximity<-as.factor(df$ocean_proximity)
op_order<-c("INLAND", "<1H OCEAN", "NEAR OCEAN","NEAR BAY", "ISLAND")
enc_ocean_proximity<-encode_ordinal(data.frame(enc_ocean_proximity=df[["ocean_proximity"]]), order=op_order, out.int=T, full_print = F)
df<-cbind(df, enc_ocean_proximity=enc_ocean_proximity)
if("median_house_value" %in% colnames(df)) {
df$median_house_value<-df$median_house_value / median_house_value_scale
}
return(df)
}
loadAndPreprocess<-function(csvName) {
return(initialPreprocessing(read.csv(csvName)))
}
all_data=loadAndPreprocess("train.csv")
all_data
summary(all_data)
naCount<-sum(is.na(all_data$total_bedrooms))
naCount / length(all_data$total_bedrooms) * 100
set.seed(279720)
spec = c(train = .80, validate = .20)
#spec = c(train = .7, test = .15, validate = .15)
g = sample(cut(
seq(nrow(all_data)),
nrow(all_data)*cumsum(c(0,spec)),
labels = names(spec)
))
data = split(all_data, g)
nasRemoved<-data$train %>%
dplyr::select(-c(ocean_proximity, id)) %>%
filter(!is.na(total_bedrooms))
corrplot(cor(nasRemoved),
method = "ellipse",
type="full",
addCoef.col = rgb(0,0,0, alpha = 0.6), diag = TRUE, number.cex=0.77,
col= colorRampPalette(c("red","white", "green"))(100))
imp_total_bedrooms<-function(df, traindata=nasRemoved) {
x<-traindata$households
y<-traindata$total_bedrooms
lr<-lm(y ~ x)
new<-data.frame(x = df$households)
df$total_bedrooms<-as.integer(ifelse(is.na(df$total_bedrooms),
predict(lr, new),
df$total_bedrooms))
return(df)
}
data$train<-imp_total_bedrooms(data$train)
data$validate<-imp_total_bedrooms(data$validate)
print(summary(data$train$total_bedrooms))
print(summary(data$validate$total_bedrooms))
plot_outliers<-function(df, colname) {
column<-sym(colname)
hist<-ggplot(df, aes(x=!!column))+
geom_histogram(color="white", fill="blue")+
theme_minimal()
box<-ggplot(df, aes(x=!!column))+
geom_boxplot()+
theme_minimal()
qq<-ggplot(df, aes(sample=!!column))+
stat_qq()+
stat_qq_line(col="red", lwd=1)
theme_minimal()
grid.arrange(hist, box, qq, ncol=3)
}
plotAllOutliers<-function(data) {
filtered<-data
if("id" %in% colnames(data)) {
filtered<-data %>%
dplyr::select(-c(ocean_proximity, id)) %>%
filter(!is.na(total_bedrooms))
}
for (col in names(filtered)) {
plot_outliers(filtered, col)
}
}
plotAllOutliers(data$train)
addExtraFeats<-function(df) {
if("beds_per_rooms" %in% colnames(df)) {
return(df)
}
beds_per_rooms<-df$total_bedrooms / df$total_rooms
rooms_per_household<-df$total_rooms / df$households
income_per_capita<-df$median_income/df$population
income_per_household<-df$median_income/df$households
beds_per_capita<-df$total_bedrooms / df$population
rooms_per_capita<-df$total_rooms / df$population
pop_per_household<-df$population/df$households  # check this one agian after doing something with the outliers
return(cbind(df, beds_per_rooms, rooms_per_capita, rooms_per_household, income_per_capita))
}
data$train<-addExtraFeats(data$train)
data$validate<-addExtraFeats(data$validate)
model_rmse<-function(model, observations, actual_values, scale=median_house_value_scale) {
predictions<-predict(model, observations)
return(rmse(predictions, actual_values)*scale)
}
scores<-function(model, xs=data$validate, y=data$validate$median_house_value, cost = rmspe, ...) {
folds <- cvFolds(nrow(xs), K = 5, R = 10)
return(data.frame(
validation_error=model_rmse(model, xs, y),
k_fold_cv_error=repCV(model, cost = cost, folds = folds, ...)$cv[[1]]*median_house_value_scale
))
}
extractTrainingVars<-function(data) {
return(data %>% dplyr::select(median_house_value,
median_income,
enc_ocean_proximity,
total_rooms,
latitude,
longitude,
total_bedrooms,
housing_median_age,
beds_per_rooms,
rooms_per_capita,
rooms_per_household,
income_per_capita))
}
training_vars_1<-extractTrainingVars(data$train)
fit1<-lm(median_house_value ~ ., data = training_vars_1)
scores(fit1)
cooksd<-cooks.distance(fit1)
plot(cooksd, pch="*", cex=1, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
distances<-data.frame(d=cooksd[cooksd>4*mean(cooksd, na.rm=T)])
distances<-distances %>% arrange(desc(d))
indices<-as.integer(row.names(distances))
removeTopNOutliers<-function(n, indices, data) {
return( data[-match(indices[1:n], rownames(data)), ])
}
trainMinusTopOL<-removeTopNOutliers(3, indices, data$train)
trainMinusAllOL<-removeTopNOutliers(length(indices), indices, data$train)
fitTop3  <-lm(median_house_value ~ ., data = extractTrainingVars(trainMinusTopOL))
fitAll<-lm(median_house_value ~ ., data = extractTrainingVars(trainMinusAllOL))
scores(fitTop3  )
scores(fitAll)
data$train[match(indices[1:3], rownames(data$train)),]
summary(fitTop3)
summary(fitAll)
outlierIndices<-as.numeric(names(car::outlierTest(fit1)[[1]]))
trainMinusAllOL2<-removeTopNOutliers(length(outlierIndices), outlierIndices, data$train)
fitAll2<-lm(median_house_value ~ ., data = extractTrainingVars(trainMinusAllOL2))
scores(fitAll2)
cap<-function(x, IQR_factor=1.5, qntLo=.25, qntHi=.75, capLo=.05, capHi=.95) {
qnt <- quantile(x, probs=c(qntLo, qntHi), na.rm=T)
caps <- quantile(x, probs=c(capLo, capHi), na.rm=T)
delta<-IQR_factor * IQR(x, na.rm=T)
thresholds<-c(qnt[1] - delta, qnt[2] + delta)
x[x < thresholds[1]] <- caps[1]
x[x > thresholds[2]] <- caps[2]
print(paste("caps:", caps[1], caps[2]))
print(paste("thresholds:", thresholds[1], thresholds[2]))
return(x)
}
extractAndRecalculateTrainingVars<-function(data) {
beds_per_rooms<-data$total_bedrooms / data$total_rooms
rooms_per_household<-data$total_rooms / data$households
income_per_capita<-data$median_income/data$population
income_per_household<-data$median_income/data$households
beds_per_capita<-data$total_bedrooms / data$population
rooms_per_capita<-data$total_rooms / data$population
pop_per_household<-data$population/data$households
return(data.frame(   median_income=data$median_income,
enc_ocean_proximity=data$enc_ocean_proximity,
total_rooms=data$total_rooms,
latitude=data$latitude,
longitude=data$longitude,
total_bedrooms=data$total_bedrooms,
housing_median_age=data$housing_median_age,
beds_per_rooms=beds_per_rooms,
rooms_per_capita=rooms_per_capita,
rooms_per_household=rooms_per_household,
income_per_capita=income_per_capita))
}
compare_capped_performance<-function(train_data, colName, candidates, extract=extractAndRecalculateTrainingVars) {
# implement scaling/norm/transform and add it here
# allow more than one var at the same time
for (candidate in names(candidates)) {
print(candidate)
col<-candidates[[candidate]]
train_data[[colName]]<-col
fit<-lm(median_house_value ~ ., data = extract(train_data))
print(paste(scores(fit)))
}
}
data_train<-trainMinusTopOL
candidates<-data.frame(
original=data_train$total_rooms,
cap_default=cap(data_train$total_rooms)
,cap_2=cap(data_train$total_rooms, IQR_factor = 1.5)
,cap_2=cap(data_train$total_rooms, IQR_factor = 1.75)
,cap_3=cap(data_train$total_rooms, IQR_factor = 2)
,cap_5=cap(data_train$total_rooms, IQR_factor = 7)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_rooms", candidates)
cap<-function(x, IQR_factor=1.5, qntLo=.25, qntHi=.75, capLo=.05, capHi=.95) {
qnt <- quantile(x, probs=c(qntLo, qntHi), na.rm=T)
caps <- quantile(x, probs=c(capLo, capHi), na.rm=T)
delta<-IQR_factor * IQR(x, na.rm=T)
thresholds<-c(qnt[1] - delta, qnt[2] + delta)
x[x < thresholds[1]] <- caps[1]
x[x > thresholds[2]] <- caps[2]
print(paste("caps:", caps[1], caps[2]))
print(paste("thresholds:", thresholds[1], thresholds[2]))
return(x)
}
extractAndRecalculateTrainingVars<-function(data) {
beds_per_rooms<-data$total_bedrooms / data$total_rooms
rooms_per_household<-data$total_rooms / data$households
income_per_capita<-data$median_income/data$population
income_per_household<-data$median_income/data$households
beds_per_capita<-data$total_bedrooms / data$population
rooms_per_capita<-data$total_rooms / data$population
pop_per_household<-data$population/data$households
return(data.frame(   median_income=data$median_income,
enc_ocean_proximity=data$enc_ocean_proximity,
total_rooms=data$total_rooms,
latitude=data$latitude,
longitude=data$longitude,
total_bedrooms=data$total_bedrooms,
housing_median_age=data$housing_median_age,
beds_per_rooms=beds_per_rooms,
rooms_per_capita=rooms_per_capita,
rooms_per_household=rooms_per_household,
income_per_capita=income_per_capita))
}
compare_capped_performance<-function(train_data, colName, candidates, extract=extractAndRecalculateTrainingVars) {
# implement scaling/norm/transform and add it here
# allow more than one var at the same time
for (candidate in names(candidates)) {
print(candidate)
train_data[[colName]]<-candidates[[candidate]]
fit<-lm(median_house_value ~ ., data = extract(train_data))
print(paste(scores(fit)))
}
}
data_train<-trainMinusTopOL
candidates<-data.frame(
original=data_train$total_bedrooms,
cap_default=cap(data_train$total_bedrooms)
,cap_2=cap(data_train$total_bedrooms, IQR_factor = 1.5)
,cap_2=cap(data_train$total_bedrooms, IQR_factor = 1.75)
,cap_3=cap(data_train$total_bedrooms, IQR_factor = 2)
,cap_5=cap(data_train$total_bedrooms, IQR_factor = 7)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_bedrooms", candidates)
cap<-function(x, IQR_factor=1.5, qntLo=.25, qntHi=.75, capLo=.05, capHi=.95) {
qnt <- quantile(x, probs=c(qntLo, qntHi), na.rm=T)
caps <- quantile(x, probs=c(capLo, capHi), na.rm=T)
delta<-IQR_factor * IQR(x, na.rm=T)
thresholds<-c(qnt[1] - delta, qnt[2] + delta)
x[x < thresholds[1]] <- caps[1]
x[x > thresholds[2]] <- caps[2]
print(paste("caps:", caps[1], caps[2]))
print(paste("thresholds:", thresholds[1], thresholds[2]))
return(x)
}
extractAndRecalculateTrainingVars<-function(data) {
beds_per_rooms<-data$total_bedrooms / data$total_rooms
rooms_per_household<-data$total_rooms / data$households
income_per_capita<-data$median_income/data$population
income_per_household<-data$median_income/data$households
beds_per_capita<-data$total_bedrooms / data$population
rooms_per_capita<-data$total_rooms / data$population
pop_per_household<-data$population/data$households
return(data.frame(median_house_value=data$median_house_value
median_income=data$median_income,
cap<-function(x, IQR_factor=1.5, qntLo=.25, qntHi=.75, capLo=.05, capHi=.95) {
qnt <- quantile(x, probs=c(qntLo, qntHi), na.rm=T)
caps <- quantile(x, probs=c(capLo, capHi), na.rm=T)
delta<-IQR_factor * IQR(x, na.rm=T)
thresholds<-c(qnt[1] - delta, qnt[2] + delta)
x[x < thresholds[1]] <- caps[1]
x[x > thresholds[2]] <- caps[2]
print(paste("caps:", caps[1], caps[2]))
print(paste("thresholds:", thresholds[1], thresholds[2]))
return(x)
}
extractAndRecalculateTrainingVars<-function(data) {
beds_per_rooms<-data$total_bedrooms / data$total_rooms
rooms_per_household<-data$total_rooms / data$households
income_per_capita<-data$median_income/data$population
income_per_household<-data$median_income/data$households
beds_per_capita<-data$total_bedrooms / data$population
rooms_per_capita<-data$total_rooms / data$population
pop_per_household<-data$population/data$households
return(data.frame(median_house_value=data$median_house_value,
median_income=data$median_income,
enc_ocean_proximity=data$enc_ocean_proximity,
total_rooms=data$total_rooms,
latitude=data$latitude,
longitude=data$longitude,
total_bedrooms=data$total_bedrooms,
housing_median_age=data$housing_median_age,
beds_per_rooms=beds_per_rooms,
rooms_per_capita=rooms_per_capita,
rooms_per_household=rooms_per_household,
income_per_capita=income_per_capita))
}
compare_capped_performance<-function(train_data, colName, candidates, extract=extractAndRecalculateTrainingVars) {
# implement scaling/norm/transform and add it here
# allow more than one var at the same time
for (candidate in names(candidates)) {
print(candidate)
train_data[[colName]]<-candidates[[candidate]]
fit<-lm(median_house_value ~ ., data = extract(train_data))
print(paste(scores(fit)))
}
}
data_train<-trainMinusTopOL
candidates<-data.frame(
original=data_train$total_rooms,
cap_default=cap(data_train$total_rooms)
,cap_2=cap(data_train$total_rooms, IQR_factor = 1.5)
,cap_2=cap(data_train$total_rooms, IQR_factor = 1.75)
,cap_3=cap(data_train$total_rooms, IQR_factor = 2)
,cap_5=cap(data_train$total_rooms, IQR_factor = 7)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_rooms", candidates)
candidates<-data.frame(
original=data_train$total_rooms,
cap_default=cap(data_train$total_rooms)
,cap_2=cap(data_train$total_rooms, IQR_factor = 1.5)
,cap_2=cap(data_train$total_rooms, IQR_factor = 1.75)
,cap_3=cap(data_train$total_rooms, IQR_factor = 2)
,cap_5=cap(data_train$total_rooms, IQR_factor = 12)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_rooms", candidates)
candidates<-data.frame(
original=data_train$total_rooms,
cap_default=cap(data_train$total_rooms)
,cap_3=cap(data_train$total_rooms, IQR_factor = 2)
,cap_5=cap(data_train$total_rooms, IQR_factor = 14)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_rooms", candidates)
candidates<-data.frame(
original=data_train$total_rooms,
cap_default=cap(data_train$total_rooms)
,cap_3=cap(data_train$total_rooms, IQR_factor = 2)
,cap_5=cap(data_train$total_rooms, IQR_factor = 14)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_rooms", candidates)
candidates<-data.frame(
original=data_train$total_rooms,
cap_default=cap(data_train$total_rooms)
,cap_5=cap(data_train$total_rooms, IQR_factor = 16)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_rooms", candidates)
candidates<-data.frame(
original=data_train$total_rooms,
cap_default=cap(data_train$total_rooms)
,cap_5=cap(data_train$total_rooms, IQR_factor = 18)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_rooms", candidates)
candidates<-data.frame(
original=data_train$total_rooms,
cap_default=cap(data_train$total_rooms)
,cap_5=cap(data_train$total_rooms, IQR_factor = 19)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_rooms", candidates)
candidates<-data.frame(
original=data_train$total_bedrooms,
cap_default=cap(data_train$total_bedrooms)
,cap_2=cap(data_train$total_bedrooms, IQR_factor = 1.5)
,cap_3=cap(data_train$total_bedrooms, IQR_factor = 2)
,cap_5=cap(data_train$total_bedrooms, IQR_factor = 7)
,cap_5=cap(data_train$total_bedrooms, IQR_factor = 16)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "total_bedrooms", candidates)
candidates<-data.frame(
original=data_train$population,
cap_default=cap(data_train$population)
,cap_2=cap(data_train$population, IQR_factor = 1.5)
,cap_3=cap(data_train$population, IQR_factor = 2)
,cap_5=cap(data_train$population, IQR_factor = 7)
,cap_6=cap(data_train$population, IQR_factor = 15)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "population", candidates)
candidates<-data.frame(
original=data_train$population,
cap_default=cap(data_train$population)
,cap_6=cap(data_train$population, IQR_factor = 18)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "population", candidates)
candidates<-data.frame(
original=data_train$households,
cap_default=cap(data_train$households)
,cap_2=cap(data_train$households, IQR_factor = 1.5)
,cap_3=cap(data_train$households, IQR_factor = 2)
#,cap_4=cap(data_train$households, IQR_factor = 4)
,cap_5=cap(data_train$households, IQR_factor = 7)
,cap_6=cap(data_train$households, IQR_factor = 15)
,cap_7=cap(data_train$households, IQR_factor = 21)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "households", candidates)
candidates<-data.frame(
original=data_train$households,
cap_default=cap(data_train$households)
,cap_2=cap(data_train$households, IQR_factor = 1.5)
,cap_6=cap(data_train$households, IQR_factor = 18)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "households", candidates)
candidates<-data.frame(
original=data_train$households,
cap_default=cap(data_train$households)
,cap_2=cap(data_train$households, IQR_factor = 1.5)
,cap_6=cap(data_train$households, IQR_factor = 17)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "households", candidates)
candidates<-data.frame(
original=data_train$households,
cap_default=cap(data_train$households)
,cap_2=cap(data_train$households, IQR_factor = 1.5)
,cap_6=cap(data_train$households, IQR_factor = 17.5)
)
plotAllOutliers(candidates)
compare_capped_performance(data_train, "households", candidates)
candidates<-data.frame(
original=data_train$median_income,
cap_default=cap(data_train$median_income)
,cap_2=cap(data_train$median_income, IQR_factor = 1.5)
,cap_3=cap(data_train$median_income, IQR_factor = 2) ##DING!
)
#plotAllOutliers(candidates)
compare_capped_performance(data_train, "median_income", candidates, extract = extractTrainingVars)
compare_capped_performance(data_train, "median_income", candidates)
candidates<-data.frame(
original=data_train$median_income,
cap_default=cap(data_train$median_income)
,cap_2=cap(data_train$median_income, IQR_factor = 1.5)
,cap_3=cap(data_train$median_income, IQR_factor = 2) ##DING!
)
#plotAllOutliers(candidates)
compare_capped_performance(data_train, "median_income", candidates, extract = extractTrainingVars)
compare_capped_performance(data_train, "median_income", candidates)
prueba<-data_train
prueba[["median_income"]]<-candidates$cap_3
fit_cap<-lm(median_house_value ~ ., data = extractAndRecalculateTrainingVars(prueba))
scores(fit_cap)
timestamp<-function() {
my_options <- options(digits.secs = 3)
timestamp<-strftime(Sys.time(), "%m%d_%H%M%OS")
options(my_options)
return(timestamp)
}
writePredictions<-function(predictions, name, ids=testing_set$id) {
data<-cbind(id=ids, median_house_value=predictions*median_house_value_scale)
filename<-paste("predictions/", timestamp(), "_", name, ".csv", sep="")
write.csv(data, filename, row.names = FALSE, quote=FALSE)
}
writePredictions1<-function(model, name, test_set=testing_set) {
writePredictions(predict(model, test_set), name)
}
testing_set<-loadAndPreprocess("test.csv")
testing_set<-imp_total_bedrooms(testing_set)
testing_set<-addExtraFeats(testing_set)
# writePredictions(predict(fit11, xs_test_ex), "fit11")
#writePredictions1(fitLmrob, "fitLmrob")
#writePredictions1(fitLts, "fitLts")
#writePredictions1(irls, "irls")
writePredictions1(fit_cap, "fit_cap")
